{"ast":null,"code":"import { HighContrastSelector, getGlobalClassNames } from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\nvar GlobalClassNames = {\n  root: 'ms-Checkbox',\n  label: 'ms-Checkbox-label',\n  checkbox: 'ms-Checkbox-checkbox',\n  checkmark: 'ms-Checkbox-checkmark',\n  text: 'ms-Checkbox-text'\n};\nvar MS_CHECKBOX_LABEL_SIZE = '20px';\nvar MS_CHECKBOX_TRANSITION_DURATION = '200ms';\nvar MS_CHECKBOX_TRANSITION_TIMING = 'cubic-bezier(.4, 0, .23, 1)';\nexport var getStyles = function (props) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n\n  var className = props.className,\n      theme = props.theme,\n      reversed = props.reversed,\n      checked = props.checked,\n      disabled = props.disabled,\n      isUsingCustomLabelRender = props.isUsingCustomLabelRender,\n      indeterminate = props.indeterminate;\n  var semanticColors = theme.semanticColors,\n      effects = theme.effects,\n      palette = theme.palette,\n      fonts = theme.fonts;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var checkmarkFontColor = semanticColors.inputForegroundChecked; // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBorder\n\n  var checkmarkFontColorHovered = palette.neutralSecondary; // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.smallInputBorder\n\n  var checkboxBorderColor = palette.neutralPrimary;\n  var checkboxBorderIndeterminateColor = semanticColors.inputBackgroundChecked;\n  var checkboxBorderColorChecked = semanticColors.inputBackgroundChecked;\n  var checkboxBorderColorDisabled = semanticColors.disabledBodySubtext;\n  var checkboxBorderHoveredColor = semanticColors.inputBorderHovered;\n  var checkboxBorderIndeterminateHoveredColor = semanticColors.inputBackgroundCheckedHovered;\n  var checkboxBackgroundChecked = semanticColors.inputBackgroundChecked; // TODO: after updating the semanticColors slots mapping following 2 tokens need to be semanticColors.inputBackgroundCheckedHovered\n\n  var checkboxBackgroundCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\n  var checkboxBorderColorCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\n  var checkboxHoveredTextColor = semanticColors.inputTextHovered;\n  var checkboxBackgroundDisabledChecked = semanticColors.disabledBodySubtext;\n  var checkboxTextColor = semanticColors.bodyText;\n  var checkboxTextColorDisabled = semanticColors.disabledText;\n  var indeterminateDotStyles = [{\n    content: '\"\"',\n    width: 0,\n    height: 0,\n    borderRadius: effects.roundedCorner2,\n    position: 'absolute',\n    left: 10,\n    right: 0,\n    transitionProperty: 'border-width, border, border-color',\n    transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\n    transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,\n    boxSizing: 'border-box'\n  }, indeterminate && {\n    width: 10,\n    height: 10,\n    borderStyle: 'solid',\n    borderColor: checkboxBorderIndeterminateColor,\n    borderWidth: 5,\n    left: 4,\n    top: 4\n  }, indeterminate && disabled && {\n    borderColor: checkboxBorderColorDisabled\n  }];\n  return {\n    root: [classNames.root, {\n      position: 'relative',\n      display: 'flex'\n    }, reversed && 'reversed', checked && 'is-checked', !disabled && 'is-enabled', disabled && 'is-disabled', !disabled && [!checked && {\n      selectors: (_a = {}, _a[\":hover .\" + classNames.checkbox] = {\n        borderColor: checkboxBorderHoveredColor,\n        selectors: (_b = {}, _b[HighContrastSelector] = {\n          borderColor: 'Highlight'\n        }, _b)\n      }, _a[\":focus .\" + classNames.checkbox] = {\n        borderColor: checkboxBorderHoveredColor\n      }, _a[\":hover .\" + classNames.checkmark] = {\n        color: checkmarkFontColorHovered,\n        opacity: '1',\n        selectors: (_c = {}, _c[HighContrastSelector] = {\n          color: 'Highlight'\n        }, _c)\n      }, _a)\n    }, checked && !indeterminate && {\n      selectors: (_d = {}, _d[\":hover .\" + classNames.checkbox] = {\n        background: checkboxBackgroundCheckedHovered,\n        borderColor: checkboxBorderColorCheckedHovered\n      }, _d[\":focus .\" + classNames.checkbox] = {\n        background: checkboxBackgroundCheckedHovered,\n        borderColor: checkboxBorderColorCheckedHovered\n      }, _d[\".\" + classNames.checkbox] = {\n        background: checkboxBorderColorChecked,\n        borderColor: checkboxBorderColorChecked\n      }, _d[HighContrastSelector] = {\n        selectors: (_e = {}, _e[\":hover .\" + classNames.checkbox] = {\n          background: 'Window',\n          borderColor: 'Highlight'\n        }, _e[\":focus .\" + classNames.checkbox] = {\n          background: 'Highlight'\n        }, _e[\":focus:hover .\" + classNames.checkbox] = {\n          background: 'Highlight'\n        }, _e[\":focus:hover .\" + classNames.checkmark] = {\n          color: 'Window'\n        }, _e[\":hover .\" + classNames.checkmark] = {\n          color: 'Highlight'\n        }, _e)\n      }, _d)\n    }, indeterminate && {\n      selectors: (_f = {}, _f[\":hover .\" + classNames.checkbox + \", :hover .\" + classNames.checkbox + \":after\"] = {\n        borderColor: checkboxBorderIndeterminateHoveredColor\n      }, _f[\":focus .\" + classNames.checkbox] = {\n        borderColor: checkboxBorderIndeterminateHoveredColor\n      }, _f[\":hover .\" + classNames.checkmark] = {\n        opacity: '0'\n      }, _f)\n    }, {\n      selectors: (_g = {}, _g[\":hover .\" + classNames.text] = {\n        color: checkboxHoveredTextColor\n      }, _g[\":focus .\" + classNames.text] = {\n        color: checkboxHoveredTextColor\n      }, _g)\n    }], className],\n    input: {\n      position: 'absolute',\n      background: 'none',\n      opacity: 0,\n      selectors: (_h = {}, _h[\".\" + IsFocusVisibleClassName + \" &:focus + label::before\"] = {\n        outline: '1px solid ' + theme.palette.neutralSecondary,\n        outlineOffset: '2px',\n        selectors: (_j = {}, _j[HighContrastSelector] = {\n          outline: '1px solid ActiveBorder'\n        }, _j)\n      }, _h)\n    },\n    label: [classNames.label, theme.fonts.medium, {\n      display: 'flex',\n      alignItems: isUsingCustomLabelRender ? 'center' : 'flex-start',\n      cursor: disabled ? 'default' : 'pointer',\n      position: 'relative',\n      userSelect: 'none',\n      textAlign: 'left'\n    }, reversed && {\n      flexDirection: 'row-reverse',\n      justifyContent: 'flex-end'\n    }, {\n      selectors: {\n        '&::before': {\n          position: 'absolute',\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0,\n          content: '\"\"',\n          pointerEvents: 'none'\n        }\n      }\n    }],\n    checkbox: [classNames.checkbox, {\n      position: 'relative',\n      display: 'flex',\n      flexShrink: 0,\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: MS_CHECKBOX_LABEL_SIZE,\n      width: MS_CHECKBOX_LABEL_SIZE,\n      border: \"1px solid \" + checkboxBorderColor,\n      borderRadius: effects.roundedCorner2,\n      boxSizing: 'border-box',\n      transitionProperty: 'background, border, border-color',\n      transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\n      transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,\n\n      /* in case the icon is bigger than the box */\n      overflow: 'hidden',\n      selectors: {\n        ':after': indeterminate ? indeterminateDotStyles : null\n      }\n    }, indeterminate && {\n      borderColor: checkboxBorderIndeterminateColor\n    }, !reversed ? // this margin on the checkbox is for backwards compat.\n    // notably it has the effect where a customRender is used, there will be only a 4px margin from checkbox to label.\n    // the label by default would have another 4px margin for a total of 8px margin between checkbox and label.\n    // we don't combine the two (and move it into the text) to not incur a breaking change for everyone using custom render atm.\n    {\n      marginRight: 4\n    } : {\n      marginLeft: 4\n    }, !disabled && !indeterminate && checked && {\n      background: checkboxBackgroundChecked,\n      borderColor: checkboxBorderColorChecked,\n      selectors: (_k = {}, _k[HighContrastSelector] = {\n        background: 'Highlight',\n        borderColor: 'Highlight'\n      }, _k)\n    }, disabled && {\n      borderColor: checkboxBorderColorDisabled,\n      selectors: (_l = {}, _l[HighContrastSelector] = {\n        borderColor: 'InactiveBorder'\n      }, _l)\n    }, checked && disabled && {\n      background: checkboxBackgroundDisabledChecked,\n      borderColor: checkboxBorderColorDisabled\n    }],\n    checkmark: [classNames.checkmark, {\n      opacity: checked ? '1' : '0',\n      color: checkmarkFontColor,\n      selectors: (_m = {}, _m[HighContrastSelector] = {\n        color: disabled ? 'InactiveBorder' : 'Window',\n        MsHighContrastAdjust: 'none'\n      }, _m)\n    }],\n    text: [classNames.text, {\n      color: disabled ? checkboxTextColorDisabled : checkboxTextColor,\n      fontSize: fonts.medium.fontSize,\n      lineHeight: '20px'\n    }, !reversed ? {\n      marginLeft: 4\n    } : {\n      marginRight: 4\n    }, disabled && {\n      selectors: (_o = {}, _o[HighContrastSelector] = {\n        // backwards compat for the color of the text when the checkbox was rendered\n        // using a Button.\n        color: 'InactiveBorder'\n      }, _o)\n    }]\n  };\n};","map":null,"metadata":{},"sourceType":"module"}