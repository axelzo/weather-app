{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { getId, classNamesFunction, mergeAriaAttributeValues, initializeComponentRef, warnMutuallyExclusive } from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { KeytipData } from '../../KeytipData';\nvar getClassNames = classNamesFunction();\n\nvar CheckboxBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(CheckboxBase, _super);\n  /**\n   * Initialize a new instance of the Checkbox\n   * @param props - Props for the component\n   * @param context - Context or initial state for the base component.\n   */\n\n\n  function CheckboxBase(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this._checkBox = React.createRef();\n\n    _this._onFocus = function (ev) {\n      var inputProps = _this.props.inputProps;\n\n      if (inputProps && inputProps.onFocus) {\n        inputProps.onFocus(ev);\n      }\n    };\n\n    _this._onBlur = function (ev) {\n      var inputProps = _this.props.inputProps;\n\n      if (inputProps && inputProps.onBlur) {\n        inputProps.onBlur(ev);\n      }\n    };\n\n    _this._onChange = function (ev) {\n      var _a = _this.props,\n          disabled = _a.disabled,\n          onChange = _a.onChange;\n      var _b = _this.state,\n          isChecked = _b.isChecked,\n          isIndeterminate = _b.isIndeterminate;\n\n      if (!disabled) {\n        if (!isIndeterminate) {\n          if (onChange) {\n            onChange(ev, !isChecked);\n          }\n\n          if (_this.props.checked === undefined) {\n            _this.setState({\n              isChecked: !isChecked\n            });\n          }\n        } else {\n          if (onChange) {\n            onChange(ev, isChecked);\n          }\n\n          if (_this.props.indeterminate === undefined) {\n            _this.setState({\n              isIndeterminate: false\n            });\n          }\n        }\n      }\n    };\n\n    _this._onRenderLabel = function (props) {\n      var label = props.label;\n      return label ? React.createElement(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: _this._classNames.text\n      }, label) : null;\n    };\n\n    initializeComponentRef(_this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive('Checkbox', props, {\n        checked: 'defaultChecked',\n        indeterminate: 'defaultIndeterminate'\n      });\n    }\n\n    _this._id = _this.props.id || getId('checkbox-');\n    _this.state = {\n      isChecked: !!(props.checked !== undefined ? props.checked : props.defaultChecked),\n      isIndeterminate: !!(props.indeterminate !== undefined ? props.indeterminate : props.defaultIndeterminate)\n    };\n    return _this;\n  }\n\n  CheckboxBase.getDerivedStateFromProps = function (props, state) {\n    if (!props.defaultIndeterminate && state.isIndeterminate) {\n      return {\n        isIndeterminate: !!props.indeterminate\n      };\n    }\n\n    if (props.checked !== undefined) {\n      return {\n        isChecked: !!props.checked\n      };\n    }\n\n    return null;\n  };\n  /**\n   * Render the Checkbox based on passed props\n   */\n\n\n  CheckboxBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        checked = _a.checked,\n        className = _a.className,\n        defaultChecked = _a.defaultChecked,\n        disabled = _a.disabled,\n        inputProps = _a.inputProps,\n        name = _a.name,\n        boxSide = _a.boxSide,\n        theme = _a.theme,\n        ariaLabel = _a.ariaLabel,\n        ariaLabelledBy = _a.ariaLabelledBy,\n        ariaDescribedBy = _a.ariaDescribedBy,\n        styles = _a.styles,\n        _b = _a.onRenderLabel,\n        onRenderLabel = _b === void 0 ? this._onRenderLabel : _b,\n        checkmarkIconProps = _a.checkmarkIconProps,\n        ariaPositionInSet = _a.ariaPositionInSet,\n        ariaSetSize = _a.ariaSetSize,\n        keytipProps = _a.keytipProps,\n        title = _a.title,\n        label = _a.label,\n        indeterminate = _a.indeterminate;\n    var isChecked = checked === undefined ? this.state.isChecked : checked;\n    var isIndeterminate = !!(indeterminate === undefined ? this.state.isIndeterminate : indeterminate);\n    var isReversed = boxSide !== 'start' ? true : false;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      indeterminate: isIndeterminate,\n      checked: isChecked,\n      reversed: isReversed,\n      isUsingCustomLabelRender: onRenderLabel !== this._onRenderLabel\n    });\n    return React.createElement(KeytipData, {\n      keytipProps: keytipProps,\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return React.createElement(\"div\", {\n        className: _this._classNames.root\n      }, React.createElement(\"input\", tslib_1.__assign({\n        type: \"checkbox\"\n      }, inputProps, {\n        \"data-ktp-execute-target\": keytipAttributes['data-ktp-execute-target']\n      }, checked !== undefined && {\n        checked: checked\n      }, defaultChecked !== undefined && {\n        defaultChecked: defaultChecked\n      }, {\n        disabled: disabled,\n        className: _this._classNames.input,\n        ref: _this._checkBox,\n        name: name,\n        id: _this._id,\n        title: title,\n        onChange: _this._onChange,\n        onFocus: _this._onFocus,\n        onBlur: _this._onBlur,\n        \"aria-disabled\": disabled,\n        \"aria-label\": ariaLabel || label,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-describedby\": mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby']),\n        \"aria-posinset\": ariaPositionInSet,\n        \"aria-setsize\": ariaSetSize,\n        \"aria-checked\": isIndeterminate ? 'mixed' : isChecked ? 'true' : 'false'\n      })), React.createElement(\"label\", {\n        className: _this._classNames.label,\n        htmlFor: _this._id\n      }, React.createElement(\"div\", {\n        className: _this._classNames.checkbox,\n        \"data-ktp-target\": keytipAttributes['data-ktp-target']\n      }, React.createElement(Icon, tslib_1.__assign({\n        iconName: \"CheckMark\"\n      }, checkmarkIconProps, {\n        className: _this._classNames.checkmark\n      }))), onRenderLabel(_this.props, _this._onRenderLabel)));\n    });\n  };\n\n  Object.defineProperty(CheckboxBase.prototype, \"indeterminate\", {\n    get: function () {\n      return this.state.isIndeterminate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CheckboxBase.prototype, \"checked\", {\n    get: function () {\n      return this.state.isChecked;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CheckboxBase.prototype.focus = function () {\n    if (this._checkBox.current) {\n      this._checkBox.current.focus();\n    }\n  };\n\n  CheckboxBase.defaultProps = {\n    boxSide: 'start'\n  };\n  return CheckboxBase;\n}(React.Component);\n\nexport { CheckboxBase };","map":null,"metadata":{},"sourceType":"module"}