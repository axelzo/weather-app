{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { HighContrastSelector, ScreenWidthMaxSmall, getScreenSelector, getGlobalClassNames, IconFontSizes } from '../../Styling';\nimport { MessageBarType } from './MessageBar.types';\nvar GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine'\n}; // Returns the background color of the MessageBar root element based on the type of MessageBar.\n\nvar getRootBackground = function (messageBarType, palette, semanticColors) {\n  switch (messageBarType) {\n    case MessageBarType.error:\n    case MessageBarType.blocked:\n      return semanticColors.errorBackground;\n\n    case MessageBarType.severeWarning:\n      return semanticColors.blockingBackground;\n\n    case MessageBarType.success:\n      return semanticColors.successBackground;\n\n    case MessageBarType.warning:\n      return semanticColors.warningBackground;\n  }\n\n  return palette.neutralLighter;\n}; // Returns the icon color based on the type of MessageBar.\n\n\nvar getIconColor = function (messageBarType, palette, semanticColors) {\n  switch (messageBarType) {\n    case MessageBarType.error:\n    case MessageBarType.blocked:\n    case MessageBarType.severeWarning:\n      return semanticColors.errorText;\n\n    case MessageBarType.success:\n      return palette.green;\n\n    case MessageBarType.warning:\n      return semanticColors.warningText;\n  }\n\n  return palette.neutralSecondary;\n};\n\nexport var getStyles = function (props) {\n  var _a, _b, _c, _d, _e;\n\n  var theme = props.theme,\n      className = props.className,\n      messageBarType = props.messageBarType,\n      onDismiss = props.onDismiss,\n      truncated = props.truncated,\n      isMultiline = props.isMultiline,\n      expandSingleLine = props.expandSingleLine;\n  var semanticColors = theme.semanticColors,\n      palette = theme.palette,\n      fonts = theme.fonts;\n  var SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var dismissalAndExpandIconStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: palette.neutralPrimary,\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      MsHighContrastAdjust: 'none',\n      color: 'Window'\n    }, _a)\n  };\n  var dismissalAndExpandStyle = {\n    flexShrink: 0,\n    width: 32,\n    height: 32,\n    padding: '8px 12px',\n    selectors: {\n      '& .ms-Button-icon': dismissalAndExpandIconStyle,\n      ':hover': {\n        backgroundColor: 'transparent'\n      },\n      ':active': {\n        backgroundColor: 'transparent'\n      }\n    }\n  };\n  return {\n    root: [classNames.root, theme.fonts.medium, messageBarType === MessageBarType.error && classNames.error, messageBarType === MessageBarType.blocked && classNames.blocked, messageBarType === MessageBarType.severeWarning && classNames.severeWarning, messageBarType === MessageBarType.success && classNames.success, messageBarType === MessageBarType.warning && classNames.warning, isMultiline ? classNames.multiline : classNames.singleline, !isMultiline && onDismiss && classNames.dismissalSingleLine, !isMultiline && truncated && classNames.expandingSingleLine, {\n      background: getRootBackground(messageBarType, palette, semanticColors),\n      color: palette.neutralPrimary,\n      minHeight: 32,\n      width: '100%',\n      display: 'flex',\n      wordBreak: 'break-word',\n      selectors: (_b = {\n        '& .ms-Link': tslib_1.__assign({\n          color: palette.themeDark\n        }, fonts.small)\n      }, _b[HighContrastSelector] = {\n        background: 'WindowText',\n        color: 'Window'\n      }, _b)\n    }, isMultiline && {\n      flexDirection: 'column'\n    }, className],\n    content: [classNames.content, {\n      display: 'flex',\n      width: '100%',\n      lineHeight: 'normal'\n    }],\n    iconContainer: [classNames.iconContainer, {\n      fontSize: IconFontSizes.medium,\n      minWidth: 16,\n      minHeight: 16,\n      display: 'flex',\n      flexShrink: 0,\n      margin: '8px 0 8px 12px'\n    }],\n    icon: {\n      color: getIconColor(messageBarType, palette, semanticColors),\n      selectors: (_c = {}, _c[HighContrastSelector] = {\n        MsHighContrastAdjust: 'none',\n        color: 'Window'\n      }, _c)\n    },\n    text: [classNames.text, tslib_1.__assign({\n      minWidth: 0,\n      display: 'flex',\n      flexGrow: 1,\n      margin: 8\n    }, fonts.small, {\n      selectors: (_d = {}, _d[HighContrastSelector] = {\n        MsHighContrastAdjust: 'none'\n      }, _d)\n    }), !onDismiss && {\n      marginRight: 12\n    }],\n    innerText: [classNames.innerText, {\n      lineHeight: 16,\n      selectors: {\n        '& span a': {\n          paddingLeft: 4\n        }\n      }\n    }, truncated && {\n      overflow: 'visible',\n      whiteSpace: 'pre-wrap'\n    }, !isMultiline && {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    }, !isMultiline && !truncated && {\n      selectors: (_e = {}, _e[SmallScreenSelector] = {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap'\n      }, _e)\n    }, expandSingleLine && {\n      overflow: 'visible',\n      whiteSpace: 'pre-wrap'\n    }],\n    dismissSingleLine: [classNames.dismissSingleLine],\n    expandSingleLine: [classNames.expandSingleLine],\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [isMultiline ? classNames.actions : classNames.actionsSingleline, {\n      display: 'flex',\n      flexGrow: 0,\n      flexShrink: 0,\n      flexBasis: 'auto',\n      flexDirection: 'row-reverse',\n      alignItems: 'center',\n      margin: '0 12px 0 8px',\n      selectors: {\n        '& button:nth-child(n+2)': {\n          marginLeft: 8\n        }\n      }\n    }, isMultiline && {\n      marginBottom: 8\n    }, onDismiss && !isMultiline && {\n      marginRight: 0\n    }]\n  };\n};","map":null,"metadata":{},"sourceType":"module"}